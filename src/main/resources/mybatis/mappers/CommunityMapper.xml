<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="co.kr.exitobiz.Mappers.Mobile.CommunityMapper">
    <select id="getCommunityList" parameterType="HashMap" resultType="hashMap">
        select * from (
              select cc.id, cc.user_id, cc.category, cc.title, u.usernickname, u.idprofile, cc.cret_dt, cc.view_count, coalesce(cc2.cnt, 0) as comment_cnt
                ,coalesce((select sum(thumb_up::integer) from itda_web.community_content_like_history where content_id = cc.id), 0) like_cnt, cc.content
                    from itda_web.community_content cc
                    left outer join itda_app.usertable u on cc.user_id  = u.id
                    left outer join (
                        select c_content_id, count(*) as cnt from itda_app.community_comment
                            where 1=1
                              and delete_yn = false
                              and report_yn = false
                              and user_id not in (
                                select target_id from itda_app.user_block ub
                                where 1=1
                                and ub.cret_id = #{user_id}
                              )
                        group by c_content_id
                    ) as cc2 on cc2.c_content_id = cc.id
              where 1=1
                and delete_yn = false
                and declare_yn = false
                and user_id not in (
                    select target_id from itda_app.user_block ub
                        where 1=1
                        and ub.cret_id = #{user_id}
                )
                <choose>
                    <when test="select_cat == '정보공유'">
                        and category = '정보공유'
                    </when>
                    <when test="select_cat == 'QnA'">
                        and category = 'QnA'
                    </when>
                    <when test="select_cat == '팀원모집'">
                        and category = '팀원모집'
                    </when>
                    <when test="select_cat == '자유게시판'">
                        and category = '자유게시판'
                    </when>
                    <when test="select_cat == '기업매칭'">
                        and category = '기업매칭'
                    </when>
                    <otherwise>
                        and 1=1
                    </otherwise>
                </choose>
                <if test='search_array != null'>
                    and
                    <trim prefix="(" prefixOverrides="or" suffix=")">
                        <foreach item="item" index="index" collection = "search_array">
                            <trim prefix="OR">
                                TITLE LIKE '%'||#{item}||'%' OR CONTENT LIKE '%'||#{item}||'%'
                            </trim>
                        </foreach>
                    </trim>
                </if>
          ) as T1 order by
               <choose>
                    <when test="ord == '인기순'">
                        view_count desc
                    </when>
                   <when test="ord == '댓글많은순'">
                       comment_cnt desc
                   </when>
                    <otherwise>
                        cret_dt desc
                    </otherwise>
               </choose>
                limit #{cnt_sql}::integer offset #{page}::integer
    </select>

    <select id="getPopularCommunityList" parameterType="CommunityVo" resultType="HashMap">
        select * from (
                          select cc.id, cc.user_id, cc.title, u.usernickname, u.idprofile, cc.cret_dt, cc.view_count, coalesce(cc2.cnt, 0) as comment_cnt, coalesce(cclh.cl_cnt, 0) as like_cnt from itda_web.community_content cc
                            left outer join itda_app.usertable u on cc.user_id  = u.id
                            left outer join (
                              select c_content_id, count(*) as cnt from itda_app.community_comment
                              where 1=1
                                and delete_yn = false
                                and report_yn = false
                                and step = 1
                              group by c_content_id
                          ) as cc2 on cc2.c_content_id = cc.id
                            left outer join (
                              select content_id, count(*) as cl_cnt from itda_web.community_content_like_history
                              where 1=1
                                and thumb_up = true
                              group by content_id
                          ) as cclh on cclh.content_id = cc.id
                          where 1=1
                            and delete_yn = false
                            and declare_yn = false
                            and user_id not in (
                              select target_id from itda_app.user_block ub
                              where 1=1
                                 <if test="userId != null">
                                    and ub.cret_id = #{userId}
                                 </if>
                          )
                      ) as T1 order by (comment_cnt + view_count + like_cnt) desc limit 3;
    </select>

    <select id="getBlockList"  parameterType="CommunityVo" resultType="HashMap">
        select ub.blockidx, u.usernickname from itda_app.user_block ub
            left outer join itda_app.usertable u on u.id = ub.target_id
                where 1=1
                and ub.cret_id = #{userId}
        order by cret_dt desc
    </select>

    <insert id="insertBlock" parameterType="HashMap">
        insert into itda_app.user_block(
            blockidx,target_id,cret_id,cret_dt,active_yn
        ) values(
            (select coalesce(max(blockidx)+1,1) as blockidx from itda_app.user_block), #{target_id}, #{user_id}, NOW(), 'Y'
        ) ON CONFLICT(target_id,cret_id)
        DO UPDATE SET cret_dt = NOW()
    </insert>

    <delete id="delBlockUser" parameterType="HashMap">
        delete from itda_app.user_block where blockidx = #{blockidx}
    </delete>

    <delete id="delAllBlockUser" parameterType="HashMap">
        delete from itda_app.user_block where cret_id = #{cret_id}
    </delete>

    <insert id="insertReport" parameterType="HashMap">
        INSERT INTO  itda_app.report ( targetidx, category, report_user_id, target_user_id, description, status, cret_dt )
                            VALUES ( #{target_idx}, #{category}, #{user_id}, #{target_user_id}, #{description}, #{status}, NOW() )
    </insert>

    <insert id="insertComment" parameterType="HashMap">
        <selectKey keyProperty="selectParentCommentId" order="BEFORE" resultType="int">
            select max(cc.id) + 1 from itda_app.community_comment cc limit 1
        </selectKey>
        INSERT INTO itda_app.community_comment (
            c_content_id, user_id, description, like_count, delete_yn, cret_dt, updt_dt, step, parent_comment_id, report_yn
        )
        VALUES (
            #{c_content_id}, #{user_id},#{description}, 0, false, NOW(), NOW(), #{step},
            <choose>
                <when test='step == 1'>
                    #{selectParentCommentId}
                </when>
                <otherwise>
                    #{parent_comment_id}
                </otherwise>
            </choose>
          , 'N'
        )
    </insert>

    <insert id="insertCommentLike" parameterType="HashMap">
        insert into itda_app.community_comment_like_history(
            comment_like_history_id, comment_id, user_id, cret_dt, thumb_up
        ) values(
                    (select coalesce(max(comment_like_history_id)+1,1) as comment_like_history_id from itda_app.community_comment_like_history), #{comment_id}, #{user_id}, NOW(),true
                ) ON CONFLICT(comment_id, user_id)
        DO UPDATE
             SET cret_dt = NOW(),
             thumb_up =  (
             select case when cclh.thumb_up::boolean then false else true end as value from itda_app.community_comment_like_history cclh
             where 1=1
             and cclh.user_id = #{user_id}
             and cclh.comment_id = #{comment_id}
             )
    </insert>

    <update id="updateTotalCommentLike" parameterType="HashMap">
        update itda_app.community_comment
        SET like_count = (
            select like_count::numeric + ( select case when cclh.thumb_up::boolean then 1 else -1 end as value from itda_app.community_comment_like_history cclh
        where 1=1
          and cclh.user_id = #{user_id}
          and cclh.comment_id =#{comment_id}
        )
        from itda_app.community_comment
        where id = #{comment_id}) where id = #{comment_id}
    </update>

    <insert id="insertContentLike" parameterType="HashMap">
        insert into itda_web.community_content_like_history(
            content_like_history_id, content_id, user_id, cret_dt, thumb_up
        ) values(
                    (select coalesce(max(content_like_history_id)+1,1) as content_like_history_id from itda_web.community_content_like_history), #{content_id},#{user_id}, NOW(), true
                ) ON CONFLICT(content_id, user_id)
        DO UPDATE
             SET cret_dt = NOW(),
             thumb_up =  (
             select case when cclh.thumb_up::boolean then false else true end as value from itda_web.community_content_like_history cclh
             where 1=1
             and cclh.user_id = #{user_id}
             and cclh.content_id = #{content_id}
             )
    </insert>

    <update id="updateTotalContentLike" parameterType="HashMap">
        update itda_web.community_content
        SET like_count = (
            select like_count::numeric + ( select case when cclh.thumb_up::boolean then 1 else -1 end as value from itda_web.community_content_like_history cclh
        where 1=1
          and cclh.user_id =#{user_id}
          and cclh.content_id =#{content_id}
            )
        from itda_web.community_content where id = #{content_id})
        where id = #{content_id}
    </update>


    <select id="getNewId" resultType="int">
        select id from itda_web.community_content cc order by cret_dt desc limit 1
    </select>

    <select id="getCommunityDetail" parameterType="CommunityVo" resultType="hashMap">
        with up_view as (
            update itda_web.community_content set view_count = view_count+1 where id= #{id} returning *
        )
        select (select view_count from up_view) view_count,*
        from (
            select cc.id, cc.user_id, u.idprofile, cc.category, cc.title, cc.content, u.usernickname, cc.cret_dt, coalesce(cc2.cnt, 0) as comment_cnt
            , coalesce((select sum(thumb_up::integer) from itda_web.community_content_like_history where content_id = cc.id),0) like_cnt
            from itda_web.community_content cc
            left outer join itda_app.usertable u on cc.user_id  = u.id
            left outer join (select c_content_id, count(distinct c_content_id) as cnt from itda_app.community_comment group by c_content_id) as cc2 on cc2.c_content_id = cc.id
            where 1=1
            and delete_yn = false
            and declare_yn = false
            and cc.id = #{id}
        ) as T1
    </select>

    <insert id="insertCommunity" parameterType="CommunityVo">
        INSERT INTO itda_web.community_content (
            category, user_id, title, content, cret_dt, updt_dt
        )VALUES(
            #{category}, #{userId}, #{title}, #{content}, NOW(), NOW()
        )
    </insert>

    <update id="updateCommunity" parameterType="CommunityVo">
        update itda_web.community_content set
            category = #{category}, title = #{title}, content = #{content}, updt_dt = NOW()
        where id = #{id}
    </update>

    <update id="deleteCommunity" parameterType="CommunityVo">
        update itda_web.community_content set
            delete_yn = true
        where id = #{id}
    </update>

    <insert id="insertFile" parameterType="HashMap">
        insert into itda_web.community_content_file (메
                content_id, file_name, generate_name) values(
                #{content_id}, #{file_name}, #{generate_name}
            )
    </insert>

    <select id="getFile" parameterType="HashMap" resultType="HashMap">
        select file_name, generate_name as file_url from itda_web.community_content_file where content_id = #{content_id}
    </select>

    <!--  댓글  -->
    <select id="getCommentList" parameterType="HashMap" resultType="HashMap">
        select cc.* ,u.idprofile ,u.usernickname, cclh.comment_like_history_id, cclh.thumb_up,
               (select count(*)
                from itda_app.community_comment cc2
                where 1=1
                  and cc2.report_yn != 'Y'
                and cc2.delete_yn != true
                and cc2.step = 2
                and cc2.user_id not in (
                select target_id
                from itda_app.user_block ub
                where 1=1
                <if test="user_id != null">
                    and ub.cret_id = #{user_id}
                </if>
                )
                and cc2.parent_comment_id = cc.id) as comment_cnt
        from itda_app.community_comment cc
            left outer join itda_app.usertable u on u.id = cc.user_id
            left outer join itda_app.community_comment_like_history cclh on cclh.comment_id = cc.id and cclh.user_id = #{user_id}
        where 1=1
          and cc.step = 1
          and cc.report_yn != 'Y'
          and cc.delete_yn != true
          and cc.c_content_id = #{content_id}
          and cc.user_id not in (
            select target_id
            from itda_app.user_block ub
            where 1=1
        <if test="user_id != null">
            and ub.cret_id = #{user_id}
        </if>
            ) order by cret_dt desc
    </select>

    <select id="getRecommentList" parameterType="HashMap" resultType="HashMap">
        select cc.*,u.idprofile ,u.usernickname, cc.like_count,cclh.thumb_up
        from itda_app.community_comment cc
                 left outer join itda_app.usertable u on u.id = cc.user_id
        left outer join itda_app.community_comment_like_history cclh on cc.id = cclh.comment_id and cc.user_id = #{user_id}
        where 1=1
          and cc.step = 2
          and cc.report_yn != 'Y'
          and cc.delete_yn != true
          and cc.user_id not in (
                	select target_id
                	from itda_app.user_block ub
                	where 1=1
                    <if test="user_id != null">
                	    and ub.cret_id = #{user_id}
                    </if>
                )
          and cc.parent_comment_id = #{parent_comment_id};
    </select>

    <update id="updateComment" parameterType="HashMap">
        update itda_app.community_comment
        SET description = #{description} ,updt_dt = now()
        where id = #{id}
    </update>

    <update id="delComment" parameterType="HashMap">
        update itda_app.community_comment
        SET delete_yn = true
        WHERE id = #{id}
    </update>

    <update id="reviewViews" parameterType="int">
        update itda_web.community_content set view_count = view_count + 1 where id = #{id}
    </update>

    <select id="getMyContent" parameterType="HashMap" resultType="Map">
        select category, title, content, view_count, coalesce(sum(cclh.thumb_up::integer),0) like_cnt, coalesce(count(ccom.*),0) comment_cnt, to_char(cc.cret_dt, 'yyyy-mm-dd HH24:MI') cret_dt, cc.id
        from itda_web.community_content  cc
                 left outer join itda_web.community_content_like_history cclh on cc.id = cclh.content_id
                 left outer join itda_app.community_comment ccom on cc.id = ccom.c_content_id and  ccom.delete_yn = false and ccom.report_yn = false
        where 1=1
          and cc.user_id = #{user_id}
          and cc.delete_yn = false
        group by cc.category, cc.title, cc.content, cc.view_count, cc.cret_dt, cc.id
        order by cc.cret_dt desc

    </select>

    <select id="getMyComment" parameterType="HashMap" resultType="Map">
        select to_char(cc.cret_dt, 'yyyy-mm-dd HH24:MI') cret_dt, description, like_count, c_content_id, cclh.thumb_up, cc.id
        from itda_app.community_comment cc
        left outer join itda_app.community_comment_like_history cclh on cc.id = cclh.comment_id and cc.user_id = cclh.user_id
        where 1=1
          and cc.user_id = #{user_id}
          and cc.delete_yn = false
          and cc.report_yn = false
        order by cc.cret_dt desc

    </select>

    <select id="getTotalCnt" resultType="Map">
        select count(*) total_cnt
        from itda_web.community_content
        where 1=1
          and delete_yn = false
          and declare_yn = false
        <if test="category != null and category != '전체' ">
            and category = #{category}
        </if>
        <if test='search_array != null'>
            and
            <trim prefix="(" prefixOverrides="or" suffix=")">
                <foreach item="item" index="index" collection = "search_array">
                    <trim prefix="OR">
                        TITLE LIKE '%'||#{item}||'%' OR CONTENT LIKE '%'||#{item}||'%'
                    </trim>
                </foreach>
            </trim>
        </if>
     </select>


</mapper>